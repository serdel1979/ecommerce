@page "/cart"
@inject ICarritoServicio carritoServicio
@inject IVentaServicio ventaServicio
@inject NavigationManager _navServicio

@inject IToastService toastService
@inject SweetAlertService Swal

@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims


<div class="row mt-4">

@*    INFORMACION DE LOS PRODUCTOS AGREGADOS EN EL CARRITO*@

    <div class="col-sm-8">
        <div class="card mb-3">

            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-sm bg-light table-bordered">
                        <thead class="table-dark">
                            <tr>
                                <th style="width:102px"></th>
                                <th>Producto</th>
                                <th>Precio</th>
                                <th>Cantidad</th>
                                <th>Total</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>

                            @if (lista.Any())
                            {
                                foreach (var item in lista)
                                {
                                    <tr>
                                        <td valign="middle">
                                            <img class="card-img-top" src="@item.Producto.Imagen" style="width:100px">
                                        </td>
                                        <td valign="middle">@item.Producto.Nombre</td>
                                        <td valign="middle">@item.Precio</td>
                                        <td valign="middle" align="center">
                                            <div class="btn-group" role="group">
                                                <button type="button" class="btn btn-outline-dark" @onclick="(() =>Disminuir(item.Producto.Idproducto))">
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 256 256"><path fill="currentColor" d="M208 32H48a16 16 0 0 0-16 16v160a16 16 0 0 0 16 16h160a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16m-24 104H72a8 8 0 0 1 0-16h112a8 8 0 0 1 0 16" /></svg>
                                                    </button>
                                                <input class="form-control" readonly="readonly" style="width:50px" @bind-value="item.Cantidad" />
                                                <button type="button" class="btn btn-outline-dark" @onclick="(() =>Aumentar(item.Producto.Idproducto))">
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M18 12.998h-5v5a1 1 0 0 1-2 0v-5H6a1 1 0 0 1 0-2h5v-5a1 1 0 0 1 2 0v5h5a1 1 0 0 1 0 2" /></svg>
                                                    </button>
                                            </div>
                                        </td>
                                        <td valign="middle">@item.Total</td>
                                        <td valign="middle">
                                            <button type="button" class="btn btn-outline-dark" @onclick="(async () => await Eliminar(item.Producto.Idproducto))">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M10 5h4a2 2 0 1 0-4 0M8.5 5a3.5 3.5 0 1 1 7 0h5.75a.75.75 0 0 1 0 1.5h-1.32l-1.17 12.111A3.75 3.75 0 0 1 15.026 22H8.974a3.75 3.75 0 0 1-3.733-3.389L4.07 6.5H2.75a.75.75 0 0 1 0-1.5zm2 4.75a.75.75 0 0 0-1.5 0v7.5a.75.75 0 0 0 1.5 0zM14.25 9a.75.75 0 0 1 .75.75v7.5a.75.75 0 0 1-1.5 0v-7.5a.75.75 0 0 1 .75-.75m-7.516 9.467a2.25 2.25 0 0 0 2.24 2.033h6.052a2.25 2.25 0 0 0 2.24-2.033L18.424 6.5H5.576z" /></svg>
                                            </button>
                                        </td>
                                    </tr>
                                }

                                
                            }else{
                                <tr>
                                    <td colspan="6">
                                        <div class="alert alert-warning" role="alert">
                                           No hay productos en el carrito
                                        </div>
                                    </td>
                                </tr>
                            }
                           

                        </tbody>
                    </table>
                </div>

                
            </div>

         
        </div>
    </div>

@*    SE MUESTRA LA INFORMACION DE TARJETA Y OPCION DE PAGAR*@
    <div class="col-sm-4">
        <div class="card mb-3">
            <div class="card-body">
                <EditForm Model="tarjeta" OnValidSubmit="ProcesarPago">
                    <DataAnnotationsValidator></DataAnnotationsValidator>

                    <div class="mb-2">
                        <label class="form-label">Nombre Titular</label>
                        <input type="text" class="form-control form-control-sm" placeholder="" @bind-value="tarjeta.Titular" disabled="@disabled">
                        <ValidationMessage For="@(()=>tarjeta.Titular)" />
                        
                    </div>
                    <div class="mb-2">
                        <label  class="form-label">Numero Tarjeta</label>
                        <input type="text" class="form-control form-control-sm" placeholder="##############" autocomplete="off" @bind-value="tarjeta.Numero" disabled="@disabled">
                        <ValidationMessage For="@(()=>tarjeta.Numero)" />
                    </div>
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="mb-2">
                                <label class="form-label">Vigencia</label>
                                <input type="text" class="form-control form-control-sm" placeholder="MM/YY" autocomplete="off" @bind-value="tarjeta.Vigencia" disabled="@disabled">
                                <ValidationMessage For="@(()=>tarjeta.Vigencia)" />
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="mb-2">
                                <label class="form-label">CVV</label>
                                <input type="text" class="form-control form-control-sm" placeholder="###" autocomplete="off" @bind-value="tarjeta.CVV" disabled="@disabled">
                                <ValidationMessage For="@(()=>tarjeta.CVV)" />
                            </div>
                        </div>
                    </div>
                    <hr />
                    <div class="d-flex justify-content-between">
                        <div>Total a pagar:</div>
                        <div>S/. @(lista.Sum(i => i.Total))</div>
                    </div>
                    <div class="mt-2">
                        <div class="d-grid gap-1">
                            <button class="btn btn-outline-secondary float-end" type="submit" disabled="@disabled">Procesar pago</button>
                        </div>
                    </div>
                </EditForm>

               @* COMENTAR TODO ESTO*@
                <AuthorizeView>
                    <NotAuthorized>
                        <div class="alert alert-danger mt-2" role="alert">
                            Debe iniciar sesion para poder realizar la compra
                        </div>
                    </NotAuthorized>
                </AuthorizeView>


            </div>
        </div>
    </div>
</div>



@code {


    private bool disabled = true;
    private List<CarritoDTO> lista = new List<CarritoDTO>();
    private decimal  TotalPagar = 0;
    private TarjetaDTO tarjeta = new TarjetaDTO();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }


    protected override async Task OnInitializedAsync()
    {
        lista = await carritoServicio.DevolverCarrito();

        var authState = await authenticationState;
        if(authState.User.Identity.IsAuthenticated){
            disabled = false;
        }
    }


    private void Disminuir(int id)
    {
        CarritoDTO item = lista.First(p => p.Producto.Idproducto == id);
        if(item.Cantidad - 1 > 0)
        {
            decimal? precioFinal = (item.Producto.Preciooferta != 0 && item.Producto.Preciooferta < item.Producto.Precio) ? precioFinal = item.Producto.Preciooferta : precioFinal = item.Producto.Precio;

            item.Cantidad--;
            item.Total = item.Cantidad * precioFinal;
        }
    }

    private void Aumentar(int id)
    {
        CarritoDTO item = lista.First(p => p.Producto.Idproducto == id);
        decimal? precioFinal = (item.Producto.Preciooferta != 0 && item.Producto.Preciooferta < item.Producto.Precio) ? precioFinal = item.Producto.Preciooferta : precioFinal = item.Producto.Precio;

        item.Cantidad++;
        item.Total = item.Cantidad * precioFinal;

    }


    private async Task Eliminar(int id)
    {
        CarritoDTO prod = lista.First(p => p.Producto.Idproducto == id);
        if (prod != null)
        {
            lista.Remove(prod);
            await carritoServicio.EliminarCarrito(id);
        }
    }


    private async Task ProcesarPago()
    {
        if(lista.Count == 0)
        {
            toastService.ShowWarning("No hay productos en el carrito");
            return;
        }
        List<DetalleVentaDTO> detalle = new List<DetalleVentaDTO>();

        foreach(var item in lista)
        {
            detalle.Add(new DetalleVentaDTO()
                {
                    Idproducto = item.Producto.Idproducto,
                    Cantidad = item.Cantidad,
                    Total = item.Total
                });
        }

        var authState = await authenticationState;
        string idUsuario = authState.User.Claims.Where(c => c.Type == ClaimTypes.NameIdentifier).Select(c => c.Value).Single();
        VentaDTO modelo = new VentaDTO()
            {
                Idusuario = Convert.ToInt32(idUsuario),
                Total = lista.Sum(i => i.Total),
                Detalleventa = detalle
            };

        var response = await ventaServicio.Registrar(modelo);
        if (response.EsCorrecto)
        {
            await carritoServicio.LimpiarCarrito();
            toastService.ShowSuccess("La venta fue registrada");
            _navServicio.NavigateTo("/catalogo");
        }
        else
        {
            toastService.ShowError("La venta no se pudo registrar");
        }

    }


}
