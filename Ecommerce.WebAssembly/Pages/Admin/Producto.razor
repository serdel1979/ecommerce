@page "/producto"
@page "/producto/{id:int}"

@inject IProductoServicio productoServicio
@inject ICategoriaServicio categoriaServicio
@inject IToastService toastService
@inject SweetAlertService Swal
@inject NavigationManager _navServicio


@attribute [Authorize(Roles = "Administrador")]

<div class="row justify-content-center  mt-3">
    <p class="col-sm-12 col-md-8 col-xl-10 h4 mt-2">@titulo</p>
</div>
<div class="row justify-content-center  mt-3">
    <div class="col-sm-12 col-md-8 col-xl-10">

        <EditForm Model="modelo" OnValidSubmit="GuardarCambios">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="input-group">
                <span class="input-group-text bg-light" id="basic-addon3">Nombre</span>
                <input type="text" class="form-control" @bind-value="modelo.Nombre">
            </div>
            <ValidationMessage For="@(()=>modelo.Nombre)" />

            <div class="input-group  mt-3">
                <span class="input-group-text bg-light">Descripcion</span>
                <textarea class="form-control" @bind="modelo.Descripcion"></textarea>

            </div>
            <ValidationMessage For="@(()=>modelo.Descripcion)" />

            <div class="input-group mt-3">
                <label class="input-group-text bg-light" for="inputGroupSelect01">Categoria</label>
                <select class="form-select" value="@modelo.Idcategoria" @onchange="CambiarCategoria">
                    @if (listaCategoria is not null)
                    {
                        @foreach (var item in listaCategoria)
                        {
                            <option value="@item.Idcategoria">@item.Nombre</option>
                        }
                    }
                   
                </select>
            </div>

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Precio</span>
                <input type="number" class="form-control" @bind-value="modelo.Precio">
            </div>
            <ValidationMessage For="@(()=>modelo.Precio)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Precio Oferta</span>
                <input type="number" class="form-control" @bind-value="modelo.Preciooferta">
            </div>
            <ValidationMessage For="@(()=>modelo.Preciooferta)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Cantidad</span>
                <input type="number" class="form-control" @bind-value="modelo.Cantidad">
            </div>
            <ValidationMessage For="@(()=>modelo.Cantidad)" />

            <div class="input-group mt-3">
                <label class="input-group-text bg-light">Imagen</label>
                <InputFile type="file" class="form-control" accept="image/png, image/gif, image/jpeg" OnChange="OnFileChange"></InputFile>
            </div>

            <div class="mt-3">
                <button type="submit" class="btn btn-primary" style="width:130px">@boton</button>
                <a href="/productos" class="btn btn-secondary" style="width:130px">Volver</a>
            </div>
        </EditForm>




    </div>

</div>

@code {



    [Parameter]
    public int id { get; set; }

    private string titulo = "Nuevo Producto";

    private string boton = "Crear";

    private List<CategoriaDTO> listaCategoria = null;

    private ProductoDTO modelo = new ProductoDTO();

    IReadOnlyList<IBrowserFile> selectedFiles;








    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        FileInfo fileInfo = new FileInfo(e.File.Name);
        if (fileInfo.Extension.ToLower().Contains("jpg") || fileInfo.Extension.ToLower().Contains("png"))
        {
            var format = $"image/{fileInfo.Extension.Replace(".","")}";
            var resizeName = await e.File.RequestImageFileAsync(format, 450, 300);
            var buffer = new byte[resizeName.Size];
            await resizeName.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            modelo.Imagen = imageData;
        }
    }


    private void CambiarCategoria(ChangeEventArgs e)
    {
        modelo.Idcategoria = Convert.ToInt32(e.Value.ToString());
    }




    protected override async Task OnParametersSetAsync()
    {
        if (id != 0)
        {
            titulo = "Editar producto";
            boton = "Actualizar";


            var response = await productoServicio.Obtener(id);

            if (response.EsCorrecto)
            {
                modelo = (ProductoDTO)response.Resultado!;
            }
            else
            {
                toastService.ShowWarning(response.Mensaje);
            }

        }

    }

    protected override async Task OnInitializedAsync()
    {
        await ObtenerCategorias();
    }


    private async Task ObtenerCategorias(string valor = "")
    {

        var response = await categoriaServicio.Lista(valor);

        if (response.EsCorrecto)
        {
            listaCategoria = (List<CategoriaDTO>)response.Resultado!;
            if (listaCategoria.Any() && id == 0)
            {
                modelo.Idcategoria = listaCategoria.First().Idcategoria;
            }
        }
        else
        {
            listaCategoria = new List<CategoriaDTO>();
        }

        StateHasChanged();
    }

    private async Task GuardarCambios()
    {


        bool respuesta = true;

        string mensaje = string.Empty;

        if (id != 0)
        {
            var response = await productoServicio.Editar(modelo);
            if (response.EsCorrecto)
            {
                mensaje = "Producto editado!!";
            }
            else
            {
                mensaje = "Error con la edición del producto!";
            }
        }
        else
        {

            var response = await productoServicio.Crear(modelo);
            if (response.EsCorrecto)
            {
                mensaje = "Producto creado!!";
            }
            else
            {
                mensaje = "Error con la creación del producto!";
            }
        }

        if (respuesta)
        {
            toastService.ShowSuccess(mensaje);
            _navServicio.NavigateTo("/productos");
        }
        else
        {
            toastService.ShowError(mensaje);
        }

    }



}
